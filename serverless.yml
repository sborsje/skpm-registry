service: skpm-registry

custom:
  tableName: ${opt:stage, self:provider.stage}-plugins
  domainName: ${opt:stage, self:provider.stage}-plugins-es

provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  profile: perso
  region: eu-west-1
  environment:
    TABLE_NAME: ${self:custom.tableName}
    DOMAIN_NAME: ${self:custom.domainName}
    GITHUB_AUTH_TOKEN: ${env:GITHUB_AUTH_TOKEN}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
        - "es:*"
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
        - "apigateway:POST"
      Resource:
        - arn:aws:dynamodb:*:*:table/${self:custom.tableName}
        - arn:aws:es:*:*:domain/${self:custom.domainName}
        - "arn:aws:apigateway:*"

package:
  exclude:
    - "node_modules/aws-sdk/**"
    - "node_modules/serverless/**"
    - "node_modules/chai/**"
    - "node_modules/injectr/**"
    - "node_modules/mocha/**"
    - "node_modules/nsp/**"
    - "node_modules/standard/**"
    - "node_modules/sinon*/**"
    - "test/**"
    - "**/spec.js"

functions:
  packageSearch:
    handler: lib/package/search/index.handler
    events:
      - http:
          path: "registry"
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: >
                {
                  "q": "$input.params('q')"
                }
  packageGet:
    handler: lib/package/get/index.handler
    events:
      - http:
          path: "registry/{name}"
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: >
                {
                  "name": "$input.params('name')"
                }
  packagePut:
    handler: lib/package/put/index.handler
    events:
      - http:
          path: "registry/{name}"
          method: put
          cors: true
          integration: lambda
          request:
            template:
              application/json: >
                {
                  "name": "$input.params('name')",
                  "body": "$util.escapeJavaScript($input.json('$'))"
                }
  packageSync:
    handler: lib/package/sync/index.handler
    timeout: 300
    events:
      - http:
          path: "registry/sync"
          method: post
          cors: true
          integration: lambda
          request:
            template:
              application/json: >
                {
                  "body": "$util.escapeJavaScript($input.json('$'))"
                }

resources:
  Resources:
    PluginsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: name
            AttributeType: S
        KeySchema:
          -
            AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
    PluginsESDomain:
      Type: 'AWS::Elasticsearch::Domain'
      Properties:
        DomainName: ${self:custom.domainName}
